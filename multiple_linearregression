import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import cross_val_score  
from sklearn.preprocessing import StandardScaler

# Load the dataset
df = pd.read_csv('/content/multiple_linear_regression_dataset.csv')

# Display a random sample
df.sample()

# Shape of the dataset
df.shape

# Split the data into features (X) and target (y)
X = df.drop('income', axis=1)
y = df['income']

# Split into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply StandardScaler to the training and test sets
scr = StandardScaler()
x_train = scr.fit_transform(x_train)  # Fit and transform on the training data
x_test = scr.transform(x_test)        # Only transform the test data (using training data stats)

# Create and fit the linear regression model
lr = LinearRegression()
lr.fit(x_train, y_train)

# Make predictions on the test data
y_pred = lr.predict(x_test)

# Evaluate the model using R-squared
print("R-squared score is:", r2_score(y_test, y_pred))

# Perform cross-validation on the training data
cv_scores = cross_val_score(lr, x_train, y_train, cv=5, scoring='r2')

# Print the cross-validation scores
print("Cross-validation R-squared scores:", cv_scores)
print("Mean R-squared from cross-validation:", cv_scores.mean())
print("Standard deviation of R-squared from cross-validation:", cv_scores.std())
